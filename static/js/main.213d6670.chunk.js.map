{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js","Card.module.scss","App.module.scss"],"names":["Card","a","b","c","d","title","freeText","freeTextCentered","items","seed","width","height","fontSize","seedGenerator","str","i","h","length","Math","imul","charCodeAt","xmur3","String","rand","t","randomized","arrSize","forEach","item","push","sort","freeTextRandom","freeTextLocation","floor","splice","className","styles","Center","Grid","style","gridTemplateColumns","slice","map","index","key","defaultValues","numberOfCards","JSON","parse","localStorage","getItem","e","App","useState","useRef","useEffect","setItem","stringify","max","cardArray","Array","Number","fill","Helmet","name","content","Cards","random","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.213d6670.chunk.js","sourcesContent":["/* eslint-disable no-mixed-operators */\r\nimport React from 'react';\r\nimport styles from './Card.module.scss';\r\n\r\n// We need to seed our random number generator so that we get consistently\r\n// ordered output for each card. Otherwise, each state change results in\r\n// shuffled output.\r\n// Source of functions: https://stackoverflow.com/a/47593316/379160\r\nconst xmur3 = (str) => {\r\n  for (var i = 0, h = 1779033703 ^ str.length; i < str.length; i++) {\r\n    h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\r\n    h = h << 13 | h >>> 19;\r\n  }\r\n  return function() {\r\n    h = Math.imul(h ^ h >>> 16, 2246822507);\r\n    h = Math.imul(h ^ h >>> 13, 3266489909);\r\n    return (h ^= h >>> 16) >>> 0;\r\n  }\r\n};\r\nconst sfc32 = (a, b, c, d) => {\r\n  return function() {\r\n    a >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0; \r\n    var t = (a + b) | 0;\r\n    a = b ^ b >>> 9;\r\n    b = c + (c << 3) | 0;\r\n    c = (c << 21 | c >>> 11);\r\n    d = d + 1 | 0;\r\n    t = t + d | 0;\r\n    c = c + t | 0;\r\n    return (t >>> 0) / 4294967296;\r\n  }\r\n};\r\n\r\nconst Card = ({ title, freeText, freeTextCentered, items, seed, width, height, fontSize }) => {\r\n  // Seed the PRNG with the card index so that the order of output is always\r\n  // randomized the same way per card\r\n  const seedGenerator = xmur3(String(seed));\r\n  const rand = sfc32(seedGenerator(), seedGenerator(), seedGenerator(), seedGenerator());\r\n\r\n  // Write the items into a new `randomized` array that can be \"sorted\" by the\r\n  // output of the PRNG\r\n  const randomized = [];\r\n  const arrSize = width * height;\r\n  while (randomized.length < arrSize) {\r\n    items.forEach((item) => randomized.push(item));\r\n  }\r\n  randomized.sort((a, b) => rand() < .5 ? -1 : 1);\r\n\r\n  // Add a \"FREE\" cell in either a random or static location\r\n  const freeTextRandom = rand();\r\n  if (freeText) {\r\n    const freeTextLocation = freeTextCentered ?\r\n      (Math.floor(height / 2) * width) + Math.floor(width / 2) :\r\n      Math.floor(freeTextRandom * arrSize);\r\n    randomized.splice(freeTextLocation, 0, freeText);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.Center}>\r\n      <div className={styles.Card}>\r\n        <h1>{title}</h1>\r\n        <div className={styles.Grid} style={{ gridTemplateColumns: `repeat(${width}, 1fr)`, fontSize: `${fontSize}%` }}>\r\n          { randomized.slice(0, arrSize).map((item, index) =>\r\n            <div key={rand()}>\r\n              <div>{item}</div>\r\n            </div>\r\n          ) }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport Card from './Card';\r\nimport FormGroup from './FormGroup';\r\nimport styles from './App.module.scss';\r\n\r\nconst defaultValues = {\r\n  title: 'Calliope Mori Bingo',\r\n  freeText: 'FREE',\r\n  freeTextCentered: true,\r\n  width: 5,\r\n  height: 5,\r\n  fontSize: 100,\r\n  numberOfCards: 1000000,\r\n  items: [\r\n    'gushing over friends and mentors',\r\n    'PEACE!!!',\r\n    'NARUHODONE',\r\n    'Do not get it Twisted',\r\n    'no salt',\r\n    'It\\'s like that',\r\n    'PLEASE, SIR',\r\n    'I hate it',\r\n    'STOP',\r\n    'humming to BGM',\r\n    'Nanchara Kanchara',\r\n    'oisho',\r\n    'SIP',\r\n    'Your Boi',\r\n    'TEE HEE TEE HEE',\r\n    '\\\"it\\'s fine\\\" x4',\r\n    'trying not to swear and doing it anyway',\r\n    'Kusotori in chat',\r\n    'voice crack',\r\n    'niHongo muzuKAshii!',\r\n    'palm spaghetti',\r\n    'ghost rider',\r\n    'cursed instrument performance',\r\n    'PACHIPACHI PACHIPACHI',\r\n    'sleepy reaper',\r\n    'MIZU!!!',\r\n    '\\\"Scythe Swinging Lessons\\\"'\r\n  ],\r\n  // Attempt to load existing values from localStorage\r\n  ...(() => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('bingo'));\r\n    } catch (e) {\r\n      return {};\r\n    }\r\n  })(),\r\n};\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nconst App = () => {\r\n  const [title, setTitle] = useState(defaultValues.title);\r\n  const [freeText, setFreeText] = useState(defaultValues.freeText);\r\n  const [freeTextCentered, setFreeTextCentered] = useState(defaultValues.freeTextCentered);\r\n  const [width, setWidth] = useState(defaultValues.width);\r\n  const [height, setHeight] = useState(defaultValues.height);\r\n  const [fontSize, setFontSize] = useState(defaultValues.fontSize);\r\n  const [numberOfCards, setNumberOfCards] = useState(defaultValues.numberOfCards);\r\n  const [items, setItems] = useState(defaultValues.items);\r\n  const addInputRef = useRef(null);\r\n  const clickHandler = () => {\r\n    const item = addInputRef.current.value;\r\n    if (item && !items.includes(item)) {\r\n      setItems([ item, ...items ]);\r\n      addInputRef.current.value = '';\r\n    }\r\n    addInputRef.current.focus();\r\n  };\r\n  const removeItem = (item) => {\r\n    setItems([ ...items ].filter((x) => x !== item));\r\n  };\r\n\r\n  // Store state values in localStorage when they are changed\r\n  useEffect(() => {\r\n    localStorage.setItem('bingo', JSON.stringify({\r\n      title,\r\n      freeText,\r\n      freeTextCentered,\r\n      width,\r\n      height,\r\n      fontSize,\r\n      numberOfCards,\r\n      items,\r\n    }));\r\n  }, [title, freeText, freeTextCentered, width, height, fontSize, numberOfCards, items]);\r\n\r\n  var cardArray = (new Array(Number(numberOfCards))).fill().map((a, seed) =>\r\n          <Card\r\n            items={items}\r\n            title={title}\r\n            freeText={freeText}\r\n            freeTextCentered={freeTextCentered}\r\n            seed={seed}\r\n            width={width}\r\n            height={height}\r\n            fontSize={fontSize}\r\n          />\r\n        );\r\n\r\n  return (\r\n    <div className={styles.App}>\r\n      <Helmet>\r\n          <title>Hololive Bingo</title>\r\n          <meta name=\"description\" content=\"Get your Calliope Mori bingo card here\" />\r\n        </Helmet>\r\n      {/* <div className={styles.Form}>\r\n        <fieldset>\r\n          <FormGroup label=\"Card title\">\r\n            <input type=\"text\" className=\"form-control\" value={title} onChange={(event) => setTitle(event.target.value)} />\r\n          </FormGroup>\r\n          <FormGroup label=\"Free space\">\r\n            <input type=\"text\" className=\"form-control\" value={freeText} onChange={(event) => setFreeText(event.target.value)} />\r\n          </FormGroup>\r\n          <label className=\"form-check\">\r\n            <input type=\"checkbox\" className=\"form-check-input\" checked={freeTextCentered} onChange={(event) => setFreeTextCentered(!freeTextCentered)} />\r\n            <span className=\"form-check-label\">Center the free space?</span>\r\n          </label>\r\n          <FormGroup label=\"Board Width\" after=\"spaces\">\r\n            <input type=\"number\" min=\"1\" className=\"form-control\" value={width} onChange={(event) => setWidth(event.target.value)} />\r\n          </FormGroup>\r\n          <FormGroup label=\"Board Height\" after=\"spaces\">\r\n            <input type=\"number\" min=\"1\" className=\"form-control\" value={height} onChange={(event) => setHeight(event.target.value)} />\r\n          </FormGroup>\r\n          <FormGroup label=\"Font size\" after=\"%\">\r\n            <input type=\"number\" min=\"5\" max=\"300\" step=\"5\" className=\"form-control\" value={fontSize} onChange={(event) => setFontSize(event.target.value)} />\r\n          </FormGroup>\r\n          <FormGroup label=\"Number of cards\" after=\"cards\">\r\n            <input type=\"number\" min=\"1\" className=\"form-control\" value={numberOfCards} onChange={(event) => setNumberOfCards(event.target.value)} />\r\n          </FormGroup>\r\n        </fieldset>\r\n        <div className={styles.Items}>\r\n          <FormGroup label=\"Add item\" after={<button type=\"button\" onClick={clickHandler}>+</button>}>\r\n            <input type=\"text\" className=\"form-control\" defaultValue=\"\" onKeyUp={(event) => { if (event.key === 'Enter') clickHandler(); }} ref={addInputRef} />\r\n          </FormGroup>\r\n          <div>\r\n            <div>\r\n              <ul className=\"list-group\">\r\n                { items.map((item) =>\r\n                  <li key={item} className=\"list-group-item\">\r\n                    <span>{item}</span>\r\n                    <button type=\"button\" onClick={() => removeItem(item)}>\r\n                      &times;\r\n                    </button>\r\n                  </li>\r\n                ) }\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n      <div className={styles.Cards}>\r\n        { cardArray[getRandomInt(numberOfCards)] }\r\n      </div>\r\n      <div>\r\n      <a href=\"https://github.com/Dflewis816\">Poorly repurposed for hololive by Dan Lewis</a>\r\n      </div>\r\n      <div>\r\n      <a href=\"https://github.com/thirdrender\">Bingo generator created by thirdrender</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Center\":\"Card_Center__12U3Y\",\"Card\":\"Card_Card__1CQFL\",\"Grid\":\"Card_Grid__1bMtS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__28R6o\",\"Form\":\"App_Form__2zHfE\",\"Items\":\"App_Items__2zxhp\",\"Cards\":\"App_Cards__1zrLr\"};"],"sourceRoot":""}